1 + 2
source("~/.active-rstudio-document")
source("~/.active-rstudio-document", echo=TRUE)
44-11
5*11
2^3
98/9
98%/%9
98%%9
98 % 9
3 > 5
(1234 %% 234) > 100
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
animals <- c("cat", "dog", "parrot")
animals[1]
big_animals <- c("cat", "dog", "parrot", "horse", "dog")
big_animals == animals
lifespans <- c(12, 56, 43, 89)
lifespans[lifespans>75]
lifespans <- c(13, 11, 80, 27, 11, 0.5)
animals <- c("cat", "dog", "parrot", "horse", "sheep", "bee")
animals[lifespan < 75]
animals[lifespans < 75]
animals[lifespans > 5 && lifespans < 15]
animals[lifespans > 5 && lifespans < 15]
which(lifespans < 1)
which(lifespans < 20)
1:10
seq(1, 100, by=20)
seq(0, 100, by=20)
rep(9, 5)
hist(x)
nist(lifespans)
hist(lifespans)
any(lifespans > 90)
all(lifespans > 1)
any(lifespan <= 13 && lifespan >= 10)
any(lifespans <= 13 && lifespans >= 10)
any(lifespans <= 13 & lifespans >= 10)
sum(lifespans > 15) / length(lifespans)
x <- c(7, 8, 10, 45)
x_mat = matrixx, nrow=2)
x_mat = matrix, nrow=2)
x_mat = matrix(x, nrow=2)
x_mat
odds <- seq(1, 24, step=2)
odds <- seq(1, 24, by=2)
odds
length(odds0)
length(odds)
odds_mat = matrix(odds, nrow=3)
odds_mat
odds_mat = matrix(odds, ncol = 3)
odds_mat
odds_mat
odds_mat[3][2]
odds_mat[3, 2]
odds_mat[3, 2]
odds_mat[3, c(1, 3)]
install.packages("tibble")
df
df <- data.frame()
df <- data.frame(v1 = c(1, 2, 3, 4), v2 = c(6, 7, 8, 9), v3 = c(2, 4, 5, 7))
df
df[seq(1, nrow(df), by = 2), ]
df[seq(1, nrow(df), length = 2), ]
df[c(TRUE, FALSE), ]
clear()
install.packages("dplyr")
library(dplyr)
my_data_frame = data_frame(v1 = c(35, 8), v2 = c(10, 4), logicals = c(T, F))
View(my_data_frame)
new_frame <- bind_rows(my_data_frame, tibble(
v1 = 5, v2 = 20, logicals = T
))
new_frame
my_data_frame$logicals
new_frame <- bind_cols(my_data_frame, tibble(
string = c("cat", "dog")
))
new_frame
install.packages("nycflights13")
View(flights)
library(nycflights13)
View(flights)
flights2 <- flights[1:10, c("dep_delay", "arr_delay")]
flights2
flights[flights$arr_delay > 0]
flights2[flights2$arr_delay > 0]
flights2[flights2$arr_delay > 0, ]
flights[flights$arr_delay > 0, ]
flights2$arr_delay_sec <- flights2$arr_delay * 60
flights2
flights2$dep_delay <- flights2$dep_delay * 60
flights2
x <- c("Mar", "Jan", "Sep")
month_levels <- c(
"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
xf <- factor(x = x, levels = month_levels)
xf
sort(xf)
sort(x)
animal_df <- tibble(animals, lifespan)
animal_df <- tibble(animals, lifespans)
animal_df
animal_df[2:3,]
mean(animals$lifespans)
mean(animal_df$lifespans)
bind_rows(animals_df, tibble(animals = "Penguin", lifespans = 15))
bind_rows(animal_df, tibble(animals = "Penguin", lifespans = 15))
new_animal_df <- bind_rows(animal_df, tibble(animals = "Penguin", lifespans = 15))
new_animal_df <- bind_cols(new_animal_df, tibble(pet = c(T, T, T, T, F, F, F)))
new_animal_df
new_animal_df$animals[new_animal_df$lifespans >= 15]
new_animal_df$animals[new_animal_df$pet]
new_animal_df$lifespans * 12
x <- 0
for(i in 1:300){x <- x + i}
x
for(i in 20:30){print(2^i)}
?count
??count
?count()
library(dplyr)
?count
?storms
View(storms)
?unique
unique(storms)
storms
storms[name, category]
storms$name
unique(storms, name)
duplicated(storms)
storms[c('name', 'category')]
unique(storms[c('name', 'category')])
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
count(storms)
ncol(storms)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
?count
count(storms)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
complete.cases(storms)
is.na(storms)
colnames(storms)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
str(3)
"3" + 4
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
"g" + "h"
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
is.na(storms["names"])
is.na(storms["name"])
count(where(storms, name != NA))
count(where(storms, name == NA))
print("a", "B")
print("A")
print(str("A", "B"))
paste("A", "B")
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
storms$category
is.na(storms$category)
storms - is.na(storms)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
is.na(storms$category)
storms$category - is.na(storms$category)
where(is.na(storms))
which(storms, name=="Amy")
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
storms[category > 1]
filter(storms, category > 1)
filter(storms, category > 1 && year == 2000)
filter(storms, category > 1 && year = 2000)
filter(storms, category > 1 && category < 2)
filter(storms, category > 1 && category < 3)
filter(storms, category > 1 & category < 3)
filter(storms, category > 1 & year == 2000)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
View(storms_subset)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
View(storms_non_major)
?arrange
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
View(storms_subset)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
librar(ggplot)
library(ggplot)
library(ggplot2)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
?summarize
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
source("~/Documents/Notes/University/OM 420/Midterm Prep/practiceAttempt.R", echo=TRUE)
install.packages("MASS")
install.packages("ISLR")
library(ISLR)
library(MASS)
?Default
dim(Default)
names(Default)
Default
summary(default)
summary(Default)
Default~student
attach(Default)
students
student
Detach(Default)
Detatch(Default)
detach(Default)
student
lda.fit = lda(default~student+balance+income, data=Default)
lda.fit
lda.fit$counts
View(lda.fit)
lda.fit$means
install.packages("ISLR")
library(ISLR)
View(Carseats)
Carseats
summary(Carseats)
library(ISLR)
library(tibble)
library(dplyr)
# Load the carseats dataset
c <- as_tibble(Carseats)
c <- mutate(c)
# Convert logical columns to factors
c <- mutate_if(c, is.logical, as.factor)
c
summary(c)
c
install.packages("randomForest")
library(ISLR)
library(tibble)
library(dplyr)
library(randomForest)
# Load the carseats dataset
c <- as_tibble(Carseats)
c <- mutate(c)
# Create a binary response variable 'High' based on 'Salesâ€˜
c <- mutate(c, High=(Sales>8))
# Convert logical columns to factors
c <- mutate_if(c, is.logical, as.factor)
# Set the seed
set.seed(6)
# Split the data half and half
id <- sample(1:nrow(c), 0.5*nrow(c))
c_train <- c[id,] # Training Set
c_test <- c[-id,] # Testing Set
# Run random forest
bag <- randomForest(High~.-Sales, data=c_train, mtry=10, importance=T, na.action=na.omit)
bag
source("~/Documents/Notes/University/OM 420/setwd.R", echo=TRUE)
source("~/Documents/University Projects/OM 420/Project/MachineLearning.R", echo=TRUE)
source("~/Documents/University Projects/OM 420/Project/MachineLearning.R", echo=TRUE)
